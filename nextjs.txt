
				  Next.js
.............................................................................................

Software Req:

1.Node.js
2.VSCODE

Pre Knowledge:

1.Javascript
2.React fundamentals

What you are going to learn?

1.Next js UI development
2.REST api development
3.Database Programming Using Prisma ORM Framework
4.GraphQl with Apollo Framework,
5.Connecting Nextjs with Apollo Framework

............................................................................................
			Next js 
....................................................................................
What is Next?
	 Next is a flexible React framework that gives you building blocks to create fast "web applications".
         Next is react framework for building full stack web applications.

Full stack:
   End to End is one framework
  Like
   UI, Back End
   UI is react 
   Back end is also react.

What is React?
         React is JavaScript lib to build "Single Page Web applications"/SPA 


What is web app?
  Type of distributed app, deployed at server , accessed over network(internet) vi various network protocols like http,  tcp, smtp...
  
  Web apps works based on request and response model.
  Web apps are hosted on server called web server.

Web server receives request , runs a program, that program returns response to the client.


Response would be document.
=>HTML

other responses types
XML,JSON, Documents, images, videos.........

What is web app?
  Type of distributed app, deployed at server , accessed over network(internet) vi various network protocols like http,  tcp, smtp...
  
  Web apps works based on request and response model.
  Web apps are hosted on server called web server.

Web server receives request , runs a program, that program returns response to the client.

Response would be document.
=>HTML

other responses types
XML,JSON, Documents, images, videos.........

What is web and why it was created?

  Tim Berners-Lee, a British scientist, invented the World Wide Web (WWW) in 1989, while working at CERN. The web was originally conceived and developed to meet the demand for automated information-sharing between scientists in universities and institutes around the world.

The first Web browser is line mode web browser, launched in 1992.
The first web server is NeXT computer
The first web page , launched http://info.cern.ch/hypertext/WWW/TheProject.html


Technology stack:
................
1.HTML
2.Webserver - Next Computer
3.LineMode Web Browser
4.HTTP protocol.

...........................................................................................


Types of Web application:

1.Static web applications - 1989 to 1995
    Hard coded html pages, Prepared html pages kept at server, the web server will send those html pages to clients - browsers

Do you think Static web applications still exits?
  Yes!, but we don't prepare the html pages by hand.. rather we ask the server to prepare..

2.Dynamic Content generation application(1996 to till date)

 After 1995, many people thought that how we can use web for biz information system

 How to share biz information via internet?
   Generally biz data is stored in databases , how to embed database data into html pages.

 1.web server need to talk to database
 2.web server need to prepare html pages based on database records
 3.Those information must be transported to web clients.


Web server core design to get client request and send html response to the client.

Along with web server, something was introduced called "Programming language runtime"

Tech stacks:

1.CGI With C language and Perl script.
2.Java Servlets and JSP
3.Active Server pages - ASP
4.PHP


3.Web services-1998 to till date

 Rise of ECommerce, using internet and web how to exchange data between two biz organizations.
 The existing html technology was not suitable to send and receive data because html is just   user interface document language.

 We need , data to be exchanged, that's where new data model was created called 'XML'
xml based web apps called web services.

SOAP protocol was created to transfer XML based documents "SOAP based webservices"

After 2005 SOAP based web services, started failing due to mobile computing.

New Web services  were designed called "RestFull Web services"

Restfull web services were used to build any type of data formats like json,xml,pdf,html etc...


4.Client side web apps called "Single Page Web Apps"(2007 to till date)

Single page web apps are built using JavaScript at client side where as server side web services(REST apis) are used.

SPA Tech stack:
HTML 5,CSS 3, JavaScript.

Frameworks build based on SPA

1.Angular js |Angular
2.react js
3.vue js
				.....................................................................................
				React as SPA lib
.....................................................................................

Reactjs was created by Facebook , in order to build SPA applications for browsers.


Advantages of SPA:

1.Pages are created  at client side, so server load is completely removed
2.SPA reduces the lot of physical pages after deployment.
3.Clear separations of concerns.

Drawbacks of SPA:
.................

Pure client SPAs are problematic when the app is sensitive to SEO and 
Time-to concept ,This is because the browser will receive a large empty HTML page and has to wait until the JavaScript is loaded before rendering any thing.

To solve SEO Problems, new Technology was created called "SSR" - Server Side Rendering

..................................................................................
			    Server side Rendering
...................................................................................

Render: Page preparation or HTML Creation

I need SEO but at the same time, i want to use SPA as well.
 
We provide first class api to "render"  an SPA app into HTML strings on the server.

This allows server to send back already rendered HTML, allowing end users to see the content immediately while the JavaScript is being downloaded.


Hydration:
  This process is called "hydration", the app is compiled at server side and sent to the client which will be  interactive.

....................................................................................			           	Rendering Types
.....................................................................................

What is Rendering?
   Render means preparation, HTML Page preparation...


Rendering Types:
1.CSR- Client side Rendering.
   HTML Pages are prepared at client side - Pure SPA Applications
2.SSR  -Server Side rendering
   HTML Pages are prepared at server side - Dynamic Content Generation applications.

3.Hybrid Rendering /Universal rendering
   Some portion of the app is rendered at client side and some portions of the app is rendered
  at server side.

 if you want to build full ssr, you can go ahead with traditional technology such as "PHP,Java servlets,JSP,asp.x etc"

if you want to build partial ssr/hybrid rendering you can go ahead deploying the your react app on express.js server where index.html is preparted along with Search engine Meta data , client side ui is prepared at browser.

if you want to build such infrastructure, you have to build every thing manually
		but now a days you dont need, because we have hybird rendering frameworks

with lot of new features such as caching,rest api developmet,database programming etc...

			              "Next.js"

Next.js is modern framework used to build various types of web applications


.....................................................................................
		      When Rendering can happen
 		    (when html pages are prepared)
....................................................................................
1.Request time
2.Build time

1.Request time :
 When user types url 

  http://www.example.com/product--------------->Server Receives Request----Prepares Page--send   that page to client.
 Technologies : jsp,asp,php

2.Build time
    Build is nothing but, preparing app for production.. before hosting we have to prepare the   app
  During build phase, we can prepare html pages/render html pages 


SSG -  Static Site Generations:
...............................

Building web sites/apps during build phase is called SSG.

Why SSG?
  Super fast page access

Based On SSG , There is specification is available "JAM Stack"

Data changes rapidly , we need to enable request time page preparation.
.....................................................................................
			    SSR (request time) + SSG (build time)

During build process, we have to enable SSG, during runtime not for all pages we need to enable SSR (Request Time page Preparation)

....................................................
			ISR - Incremental Static Rendering
.....................................................................................

SSG - Build time or ahead of time
SSR - Request time

ISR = SSG + SSR - Build time + request time 
.....................................................................................
.....................................................................................
				What is Next.js?

  Next js is a framework that helps to build web apps of all types

 you can build Full SSR apps..
 you can build SSR With Request time
 you can build SSG with Build time -  JAM Stacks
 you can build SSR with CSR  - Server + SPA - Hybrid rendering
 you can build rest apis also - Web services

         "You cant build pure SPA apps like react with redux"

Using Next you can build 
     Pure server side apps with database access, other external api access.....


.....................................................................................
	               Next js UI layer - Next JS APP architecture
.....................................................................................
Next js uses "react core features" to build UI layer...

React core features:
1.React component driven
2.React uses data mutation techniques like props and state
3.React uses event listeners for interactions
4.React hooks


Next.js tech stack:

1.React as ui layer
2.Next does not recommend to use "redux"
3.Next uses api layer- rest api development
4.Next can talk to any database via orm frameworks...



.....................................................................................
			Next js framework and Runtime Architecture
.....................................................................................


	Next js uses "Rust based build system" where as react uses web pack build ....

What is Rust?
 It is programming language, used to build Nestjs apps. Next core engine is written in Rust only.

Next.js Compiler:
..................
 Next js Compiler is written using RUST Using SWC (Speedy Web Compiler).
https://swc.rs/docs/getting-started

SWC allows next js to transform and minify the js code for production. This replaces babel.

SWC is 20x faster than Babel, it is embedded inside next js

Turbo pack:
 Turbopack is an incremental bundler optimized for JavaScript and TypeScript, written in Rust, and built into Next.js. Turbopack can be used in Next.js in both the pages and app directories for faster local development

....................................................................................
		NEXT JS Getting Started
.....................................................................................

How to install next js and how to create app?

System Req:

1.Node.js 18 or later
2.OS - any os
3.vs code.

Installing/Create next app:
..........................

There are two ways :

1.automatic way


   We recommend starting a new Next.js app using create-next-app, which sets up everything automatically for you. To create a project, run:

npx create-next-app@latest

2.manual way

 Just create folder and app structure your self and install packages

 To manually create a new Next.js app, install the required packages:

 npm install next@latest react@latest react-dom@latest


.............................................................................................
				Next application creation types

There are two types  you can create next application.

Next.js app types

1.App router based app
   It is modern way of creating app
   Next.js version 13 and after , all apps are app router based
2.page router based app
   It is old way of creating app
   Next.js version 12 and before all apps are page router based

In both types, there are plenty of differences are there, we follow app router based only.

npx create-next-app@latest
Need to install the following packages:
create-next-app@15.2.3
Ok to proceed? (y) y

√ What is your project named? ... helloworld-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*
Creating a new Next.js app in E:\IBM\nextjs\apps\helloworld-app.
		.............................................................................................
			        Exploring Project Structure
..............................................................................................
package.json
{
  "name": "helloworld-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "next": "15.2.3"
  }
}

next.config.mjs

   Next.js Engine/runtime configuration

/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

Compiler Config:
............................
jsconfig.json

{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
.............................................................................................
Folders:

public
 Stores static assets such as images,fonts,documents
 public dir are accessed inside code using the base URL "/"

src/app:
   It is root folder where all source code of the next will go.

This is where all application code will go..

layout.js
page.js
global.css
page.module.css

.....................................................................................
How to run next app?

dev, build and prod

dev mode:

>npm run dev

.............................................................
		               Next.js Application Architecture
..............................................................................................
               Next.js app is server side app, so for each web page ,the html page is created.
		   "Next App is conventional over Configuration based"

conventional over configuration is a software design principle that reduces the need for explicit configuration by following sensible defaults.
file names and folder names are standard based.
filenames are predefined...like page.js , layout.js


.....................................................................................
			 React core features inside next js
.....................................................................................
1.Component:
  In react every thing is component, in next also the component driven arch is followed.

2.Props
    In react data is passed to the component via props.
    Components are created in a configurable way..

Types of Props:

1.Data as prop

   <User id={1} />

2.State as Prop -Dynamic Prop

  function User(){
    const [id,setId] = useState(1)
    return <UserDetails id={id} />
  }

3.function as Prop- Listeners as Prop

  function User(){
    const [id,setId] = useState(1)
    return <UserDetails setId={setId} />
  }

4.Component as Prop
  Component as Prop syntax we use heavily in Next.js

 Component Rendering:

function Tab(props){
   return <> {props.children} </>
}

<Tab/> - Self Closing
  This component has no children

<Tab>
    <Grid/> -  Component as Prop
<Tab>

.....................................................................................
			 Every thing is component  in Next.js
....................................................................................

Page Component:
  It is place holder component which displays ui.

Layout Component:
  It is container component which holds Page Component


   layout - parent
	  ------------------------------
          |                             |
                      Page -child       |
          |                             |
          |                             |
          |                             |
           -----------------------------

<Layout>
   <Page/>
</Layout>

How to declare components?

 1.every component must be "functional component" - No Class Component.
 2.every component (page,layout...)  must be exported using "export default" only.
 3.Every Next application must have "root layout" - src/app/layout.js
 4.Every Next application must have  "home/landing page" src/app/page.js
 5.Component Name can be any thing like HomePage,Home,MyHomePage,MyLayout etc..

			File Types


1.layout.js

  Shared UI for a segment(page/router) and its children
  if a layout.js presents inside src/app folder which is called root layout.
  every next.js app must have one layout.js which is root layout file.

2.nestedlayout -layout.js
   Shared UI for a a segement and its children
  when you define routing, that time we may or not use layout...

  root layout vs nested layout:
     root layout must have <html>,nested layout <div> or section elements (div,header,section ...)

Root Layout:

 <html>
  <head></head>
  <title>title</title> 
   <body>
	<nested Layout>Insert Page</nestedLayout>
   </body>
 </html>

3.page.js
       Unique UI of a route,meaning the page is mapped against routing like                /",index,products,users,customers


4.loading.js
   Loading UI (Spinner) for a segement and its children

5.not-found.js
   Not Found UI for a segment and for its children
   if routing is failed to map against a page, then next.js will show error page.

6.error.js
  It is used to show custom component logic errors.

Note:
  All error files are represented by "React Error Boundary".

7.global-error.js
  It is to show app level errors.

8.template.js:
   Specailzied re-rendered layout UI.

9.route.js
   you can write "restfull" web services".

10.default.js
    Fallback UI for "Parrel Routes"

.............................................................................................
  				    Routing
       			 	Pages and Layouts
.............................................................................................

In Next js application routing is core concept, every thing is built on the top of routing only.

In Next js routing is in built.

The Skeleton of every next app is routing only.

Routing is mapped against folders and files only...

Inside the app directory, "folders" are used to define routes...


Routing:
 menu based navigation or navigation.

IN SPA , routing is controlled by browser using history and location objects

react , angular,vue these frameworks provides abstraction on these objects.

react has react router.

in next js routing is completely in built - routing is based on folders 
urls are mapped against folder


src/app   ------------- (page.js) / (index route)

src/app/card/   (page.js) ---------- /card

src/app/dashboard  (page.js)   -- /dashboard

src/app/dashboard/settings/   (page.js)    - /dashboard/settings



src/app
  /folder -it becomes route

src/app/ ---- index route or home route.

Url pattern(Routing Pattern)

http://localhost:3000/  -----mapped against------src/app/page.js

Route Segment:

  Each folder inside "src/app" represents a "route segment" that maps to a "URL" segement. in order to create route you can nest folders inside each other.


URL Pattern:

localhost:3000 /    
	       |
            Root segment

Segment means part of url.


localhost:3000 /     dashboard /settings
		|       |            |              
	Root segment  Segment   leaf Segment
.............................................................................................
			  Nested Routing and Segments
.............................................................................................

Steps: Create new App
>npx create-next-app@latest
Need to install the following packages:
create-next-app@15.2.4
Ok to proceed? (y) y

√ What is your project named? ... core-routing
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

...............................................................................................
				Nested Folders and Routing
...............................................................................................

...........................................................................................................................................................

							Nested Folders and Routing
..........................................................................................................................................................

src/app/welcome/page.js

export default function WelcomePage(){
    return <h1>Welcome Page</h1>
}

http://localhost:3000/welcome -----> it will show page.js content of welcome/page.js

src/app/about/page.js

export default function About(){
    return <h2>About</h2>
}
http://localhost:3000/about - it will show page.js and content of about/page.js

Nested Layout:
  
src/app/layout.js - Root Layout.

 Every Next app must have one single root layout.	

src/app/welcome/layout.js  -Nested layout.
//nested layout.

export default function WelcomeLayout({ children }) {
    return <div id="welcome layout">
        {children}
    </div>
}

Note:
 inside nested folder, layout.js is optional but inside root folder layout.js is required
 page.js is required for every folder.

.............................................................................................................................................................
				  Deep Nesting
................................................................................................................................................................................................

Dashboard:

src/app/dashboard/layout.js
export default function DashboardLayout({ children }) {
    return <div id="dashboardLayout">
        {children}
    </div>
}
src/app/dashboard/page.js
export default function Dashboard(){
    return <h1>Dashboard Page</h1>
}

src/app/dashboard/settings/layout.js
export default function SettingsLayout({ children }) {
    return <div id="settingsLayout">
        {children}
    </div>
}
src/app/dashboard/settings/page.js
export default function Settings() {
    return <>
        <h1> Settings</h1>
    </>
}

src/app/dashboard/settings/password/layout.js
export default function PasswordLayout({ children }) {
    return <div id="passwordLayout">
        {children}
    </div>
}

src/app/dashboard/settings/password/page.js
export default function Password(){
    return <h2>Password Page</h2>
}
...............................................................................................
..............................................................................................................................................................
		Folder is created what if the page.js is not created - not-found.js
...............................................................................................................................................................
eg:

src/app/profile

http://localhost:3000/profile

404
This page could not be found.

if there is no page.js , then next will show the error page automatically which is mapped against not-found.js.

if you dont want default error page and its content, then you can override "not-found.js"

src/app/not-found.js
export default function NotFound() {
    return <h1>Oops,Something went Wrong</h1>
}
............................................................................................
				 template.js
.............................................................................................

layout.js and template.js are used to structure pages, that means both are same but they serve different purposes.

src/products/layout.js
export default function ProductsLayout({children}){
    return <div  id="productsLayout">
        {children}
    </div>
}

src/products/page.js

export default function Products(){ 
    return <h1>Products Page</h1>
}

template.js:
export default function ProductTemplate({ children }) {
    return <div id="productTemplate">
        {children}
    </div>
}

layout:
.......
1.persistent ( permenant ) across navigation
2.Used to wrap multiple pages under the same structure
3.Statefull - maitains state between page transitions
4.Only renders once per route segement.

Template:
1.Re-renders on every navigation
2.Used when pages need fresh instances of UI.
3.Stateless- does not persist state across transitions
4.Works like layout.js but creates a new DOM structure every time.

When to use layout and template?

Use layout for global structures - headers, footers,sidebars
Use template when pages need re-initalization on every navigation , which is best for Animations,Unique page Reloads.

Template and Layout:
   You can keep both template and layout together, but template is more dynamic where as layout is static.
				 Public Access Route
................................................................................................................................................................................................
if you have different name other than page.js, it will not be available for public access.

app/settings/config.js

http://localhost:3000/settings/config - It will throw error..

.....................................................
		 	Component Driven Archiecture
....................................................................................................................................................

Layout is container, Page is mapped against route segment, which displays UI.

Can Page Hold other Components?

    Layout
          | 
       Page
            |
 UserProfile
     |
    UserList
      |
      UserItem

npx create-next-app@latest
√ What is your project named? ... next-components
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like your code inside a `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to use Turbopack for `next dev`? ... No / Yes
√ Would you like to customize the import alias (`@/*` by default)? ... No / Yes
√ What import alias would you like configured? ... @/*

Co-location:

     In addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc) inside folders in the app directory.

src/app/profile/components/profileItem.js

export const ProfileItem = ({ profile: { name, email } }) => {
    return <>
        {/* <h2>{profile.name} {profile.email}</h2> */}
        <h2>{name} {email}</h2>
    </>
}


src/app/profile/components/profileList.js
import { ProfileItem } from './profileItem'

export const ProfileList = (props) => {
    return <div>
        {
            props.profiles.map(profile => {
                return <div key={profile.id}>
                    {/* <h2>{profile.name} {profile.email}</h2> */}
                    <ProfileItem profile={profile} />
                </div>
            })
        }
    </div>
}

src/app/profile/page.js

import { ProfileList } from "./components/profileList";
import { PROFILES } from "./mock-data/profile";

export default function Profile() {
    return <>
        <ProfileList profiles={PROFILES} />
    </>
}

src/app/profile/layout.js
export default function ProfileLayout({ children }) {
    return <div>
        {children}
    </div>
}

TasK: Just think of other components , like todos,products..